#
# Functions to display the list after moving
#

function cdd() {
    cd "$@" && ls
}

function cdp {
    cdd ~/proj/
}

function cddot {
    cd ~/dotfiles/ && ls -a
}

#
# Functions for git
#

## Delete all merged branches
function delete_merged_git_branches() {
    # defines branches that should not be deleted
    excluded_branches=("main" "master" "develop" "dev" "release" "hotfix")

    # get the list of merged branches
    merged_branches=$(git branch --merged)

    for branch in $merged_branches; do
        # check if the branch is excluded
        should_delete=true
        for excluded_branch in "${excluded_branches[@]}"; do
            if [[ "$branch" == "$excluded_branch" ]]; then
                should_delete=false
                break
            fi
        done

        # delete the branch if it is not excluded
        if [ "$should_delete" = true ]; then
            echo "Deleting branch $branch"
            git branch -d "$branch"
        fi
    done
}

alias gbdm=delete_merged_git_branches


#
# Functions for personal development
#

## Send health check request to the container
function healthcheck {
    # Identify the current environment
    if hostname | grep -q "tunetrail-frontend"; then
        echo "Running inside the frontend container"
        echo "Send request from the frontend container. URL: http://tunetrail-api:8080/health"
        curl -i http://tunetrail-api:8080/health
        return
    fi
    if hostname | grep -q "tunetrail-api"; then
        echo "Running inside the api container"
        echo "Send request from the api container. URL: http://localhost:8080/health"
        curl -i http://localhost:8080/health
        return
    fi
    echo "Running on host machine"
    echo "Send request from host machine. URL: http://localhost:18000/health"
    curl -i http://localhost:18000/health
}

## Enter the DB container and log in to PostgreSQL
function login_postgres {
    docker exec -it tunetrail-db bash -c "psql -U tunetrail -d tunetrail"
}
